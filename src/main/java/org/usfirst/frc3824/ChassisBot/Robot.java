// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.ChassisBot;

import edu.wpi.first.wpilibj.Notifier;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import jaci.pathfinder.PathfinderFRC;
import jaci.pathfinder.Trajectory;

import java.io.IOException;

import org.usfirst.frc3824.ChassisBot.commands.*;
import org.usfirst.frc3824.ChassisBot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Notifier used for starting/running/stopping path following
    private static Notifier pathFollowingNotifier = null;

    // Trajectories for path following
    private static Trajectory left_traj = null;
    private static Trajectory right_traj = null;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        /****************************************
         * Options for autonomous commands here *
         ****************************************/
        chooser.addOption("Test", new AutonomousTest());
        chooser.addOption("Double Hatch", new AutonomousDoubleHatch());
        
        /********************************************************
         * Show auto command selection module on SmartDashboard *
         ********************************************************/
        SmartDashboard.putData("Auto Selection", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();

        updateSmartDashboard();
    }

    @Override
    public void autonomousInit() {
        // Zero out gyro angle to current heading
        chassis.resetGyro();

        // Get which autonomous command to run based on selection on SmartDashboard
        autonomousCommand = chooser.getSelected();

        // Start autonomousCommand if chosen exists
        if (autonomousCommand != null)
            autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();

        updateSmartDashboard();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();

        // if the robot is still following a path when auto ends, stop 
        // the notifier thus stopping the path following
        if (pathFollowingNotifier != null)
            stopPathFollowing();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();

        updateSmartDashboard();
    }

    /********************************************
     * display updated values on SmartDashboard *
     ********************************************/
    public void updateSmartDashboard() {
        SmartDashboard.putNumber("NAVX ANGLE", chassis.getGyroAngle());
        SmartDashboard.putNumber("LEFT POS", chassis.getLeftPosition());
        SmartDashboard.putNumber("RIGHT POS", chassis.getRightPosition());
    }

    /**************************************************
     * Start/Stop notifier for following spline paths *
     **************************************************/
    public static void startPathFollowing(String pathName, boolean isReversed) {
        // Reset encoder position values for accurate encoder following
        chassis.resetPositions();

        // Try to get trajectory from designated path file
        try {
            // !!! Switching left and right trajectories due to known bug !!!
            left_traj = PathfinderFRC.getTrajectory(pathName + ".right");
            right_traj = PathfinderFRC.getTrajectory(pathName + ".left");
        } catch (IOException ex) {
            System.out.println("\nCould not find trajectory:\n" + ex.getMessage());
        }

        // If robot is facing in opposite direction (reversed), change right and left trajectories
        // initializePathFollowing(LEFT TRAJECTORY, RIGHT TRAJECTORY)
        if (!isReversed)
            chassis.initializePathFollowing(left_traj, right_traj, isReversed);
        else
            chassis.initializePathFollowing(right_traj, left_traj, isReversed);
        
        // Create notifier that will run the function, chassis.followPath(), 
        // iteratively based on time between each waypoint.
        pathFollowingNotifier = new Notifier(chassis::followPath);
        pathFollowingNotifier.startPeriodic(left_traj.get(0).dt);
    }
    public static void stopPathFollowing() {
        pathFollowingNotifier.stop();
        Robot.chassis.setMotorOutputs(0.0, 0.0);
    }
}
